What is Builder?
- Builder is a creational design pattern that lets you construct
  complex objects step by step. The pattern allows you to produce
  different types and representations of an object using the
  same construction code.

Problem
- Giant constructor call, monstrous constructor with lots of parameters,
  scattered all over the client code.
- Extend class / embedding types to cover all combinations of the parameters,
  end up a considerable number of subclasses / subtypes.

Solution
- Builder pattern suggest to extract the object construction code out of its own
  class and move it to separate objects called builders.
- Some of the construction steps might require different implementation when
  you need to build various representations of the product.
- Director (optionally), defines the order in which to execute the building steps, while
  the builder provides the implementation for those steps. The director class might be
  a good place to put various construction routines so you can reuse them
  across your program. It completely hides the detail of product construction
  from the client, the client only needs to associate a builder with a director.

Applicability
- Use the Builder pattern to get rid of a "telescopic constructor".
- Use the Builder pattern when you want your code to be able to create different
  representations of some product involve similar steps that differ
  only in the details (stone and wooden houses).
- Use the Builder to construct Composite trees or other complex objects.
- A builder doesn't expose the unfinished product while running constructions steps.
  This prevent the client code from fetching an incomplete result. (Use Director)

Implementation
1. Make sure you clearly define the common construction steps for building all
   available product representations.
2. Declare these steps in the base builder interface.
3. Create a concrete builder class for each of the product representations and implement
   their construction steps.
4. Think about creating a director class.
5. Client creates both builder and the director objects, then passed the builder object
   to director via function parameter of the construction method of the director or
   via parameter of the director's constructor.
6. Construction result can be obtained directly from the director or client
   fetch the result from the builder.

Pros:
- Single Responsibility Principle.
- Reuse the construction code when building various representations of products.
- Construct objects step by step, defer construction steps or run steps recursively.

Cons:
- Complexity increases.

Relationship with Other Patterns
- Abstract Factory returns the product immediately, whereas Builder lets you
  run some additional construction steps before fetching the product.
- Can use Builder when creating complex Composite trees because you can program
  its construction steps to work recursively.
- You can combine Builder with Bridge, director class plays the role of the abstraction,
  while different Builders acts as implementations.
- Can be implemented as Singletons.
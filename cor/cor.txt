What is Chain of Responsibility?
- COR lets you pass requests along a chain of handlers.
- Upon receiving a request, each handler decides either to process the request
  or to pass it to the next handler in the chain.
- It relies on transforming particular behaviors into stand-alone objects
  called handlers.
- The pattern suggests that you link these handlers into a chain.
  Each linked handler has a field for storing a reference to the next handler in the chain.
  In addition to processing a request, handlers pass the request further along the chain.
  The request travels along the chain until all handlers have had a chance to process it.
  A handle can decide not to pass the request further down the chain and effectively
  stop any further processing.
- You can make the handler to decides whether it can process it, if it can it doesn't
  pass the request any further. So it's either only one handler t0hat processes
  the request or none at all.
- It's crucial that all handlers classes implement the same interface.

Applicability
- Use the CoR when you program is expected to process different kind of requests in various
  ways, but the exact types of requests and their sequence are unknown beforehand.
- Use the pattern when it's essential to execute several handlers in a particular order.
- Use the pattern whens the set of handlers and their order are supposed to change at runtime.

Implementation
1. Declare the handler interface, and describe the signature of a method for handling requests.
2. Decide how the client will pass the request data into a method. The most flexible way is
   to convert the request data into an object and pass it to the handling method as an argument.
3. The handler must have a field for storing a reference to the next handler in the chain.
4. Considering making the class immutable. However if you plan to modify chains at runtime,
   you need to define a setter for altering the value of the reference field.
5. Each handler should make two decisions when receiving a request:
   1. Whether it'll process the request.
   2. Whether it'll pass the request along the chain.
6. The client may either assemble chains on its own, or receive pre-built chains from
   other objects. You can implement some factory classes to build chains according to
   the configuration or environment settings.

Pros:
- You can control the order of request handling.
- Single Responsibility Principle. Decouple classes that invoke operations from classes
  that perform operations.
- Open/Closed Principle. You can introduce new handlers into the app without breaking
  the existing client code.

Cons:
- Some request may end up unhandled.

Relationship with Other Patterns
- CoR, Command, Mediator, and Observer address various ways of connecting senders
  and receivers of requests:
  - Command establishes undirectional connections between senders and receivers.
  - Mediator eliminates direct connections between senders and receivers, forcing
    them to communicate indirectly via a mediator object.
  - Observer lets receivers dynamically subscribe to and unsubscribe from receiving requests.
- CoR is often used in conjunction with Composite.
- Handlers in CoR can be implemented as Commands. You can execute a lot of different operations
  over the same context object, represented by a request.
- CoR and Decorator have very similar class structures.
  - CoR can execute arbitrary operations independently of each other. They can stop passing
    the request further at any point.
  - Decorator can extend the object's behavior, but aren't allowed to break the flow of the
    request.
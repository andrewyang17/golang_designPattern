What is Iterator?
- Iterator lets you traverse elements of a collection without exposing its underlying representation.
- An object that facilitates the traversal of a data structure.
- The main idea behind the iterator pattern is to extract the iteration logic of a
  collection into a different object called Iterator. This Iterator provides a
  generic method of iterating over a collection independent of its type.

Applicability
- Use the Iterator when your collection has a complex data structure under the hood, but you want
  to hide its complexity from clients.
- Use Iterator to reduce duplication of the traversal code across your app.
  Make the code of the application more lean and clean.
- Use Iterator when you want your code to be able to traverse different data structures or when types
  of these structures are unknown beforehand.

Implementation
1. Declare the Iterator interface.
2. Declare the collection interface and describe a method for fetching Iterator.
   The return type should be equal to that of the Iterator interface.
3. Implement concrete iterator classes for the collections that you want to be
   traversable with Iterator.
4. Implement the collection interface in your collection classes. The main idea is to privde the
   client with a shortcut of creating Iterator, tailored for a particular collection class. The
   collection object must pass itself to the Iterator's constructor to establish a link between them.
5. The client fetches a new iterator object each time it needs to iterate over the collection elements.

Pros:
- You can iterate over the same collection in parallel because each object contains its own iteration state.
- Single Responsibility Principle. You can clean up the client code and the collections by extracting
  bulky traversal algorithms into separate classes.
- Open/Closed Principle. You can implement new types of collection and iterator and pass them to
  existing code without breaking anything.

Cons:
-  Applying the pattern can be an overkill if your app only works with simple collections.
-  Using a Iterator may be less efficient than going through elements of some specialized collections directly.

Relationship with Other Patterns
- You can use Iterators to traverse Composite trees.
- You can use Factory method along with Iterator to let collection subclasses return different types
  of Iterators that are compatible with the collections.
- You can use Memento along with Iterator to capture the current iteration state and roll it back if necessary.
- You can use Visitor along with Iterator to traverse a complex data structure and execute some operation
  over its elements, even if they all have different classes.
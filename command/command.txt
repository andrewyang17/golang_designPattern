What is Command?
- Command turns a request into a stand-alone object that contains all information
  about the request. // Encapsulate all details of an operation in a separate object.
- This transformation lets you pass requests as a method arguments, delay or queue a
  request's execution, and support undoable operations.
- It serves as links between various UI and business logic objects.
- The UI just triggers the Command, which will handles all the details.

Applicability
- Use the Command pattern when you want to parametrize object operations.
- Use the Command when you want to queue operations, schedule their execution, or execute them remotely.
- Use the Command pattern when you want to implement reversible operations.
  2 drawbacks:
    - It isn't easy to save an application's state because some of it can be private.
      But this problem can be mitigated with the Memento pattern.
    - State backups may consume quite a lot of RAM, and turn out to be hard to implement.

Implementation
1. Declare the Command Interface with a single execution method.
2. Identify classes that will act as senders. Add the fields for storing commands.
   Senders/Invokers should communicate with their commands only via Command Interface.
3. Declare receiver Interface.
4. Define receiver classes, it must have a set of fields for storing the request arguments
   along with reference to the actual receiver object. All these values must be initialized
   via the command's constructor.
5. Create Command concrete classes and store receiver Interface as a field, and
   implement the Command Interface.

Pros:
- You can assemble a set of simple commands into a complex one.
- You can implement undo/redo.
- You can implement deferred execution of operations.
- Single Responsibility Principle. Decouple classes that invoke operations from classes
  that perform operations.
- Open/Closed Principle. You can introduce new handlers into the app without breaking
  the existing client code.

Cons:
-  The code may become more complicated since you’re introducing a whole new layer between
   senders and receivers.

Relationship with Other Patterns
- CoR, Command, Mediator, and Observer address various ways of connecting senders
  and receivers of requests:
  - Command establishes undirectional connections between senders and receivers.
  - Mediator eliminates direct connections between senders and receivers, forcing
    them to communicate indirectly via a mediator object.
  - Observer lets receivers dynamically subscribe to and unsubscribe from receiving requests.
- You can use Command and Memento together when implementing “undo”.
- Handlers in CoR can be implemented as Commands. You can execute a lot of different operations
  over the same context object, represented by a request.
- Command and Strategy may look similar because you can use both to parameterize an object with
  some action. However, they have very different intents.
  - You can use Command to convert any operation into an object.
    The operation’s parameters become fields of that object.
  - Strategy usually describes different ways of doing the same thing,
    letting you swap these algorithms within a single context class.
- Prototype can help when you need to save copies of Commands into history.
- You can treat Visitor as a powerful version of the Command pattern.
  Its objects can execute operations over various objects of different classes.
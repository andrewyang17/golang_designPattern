What is Bridge?
- Bridge is a structural design pattern that divides business logic or
  a set of closely related classes into two separate class hierarchies
  (abstraction and implementation) that can be developed independently.
- Abstraction will get a reference to an object of the implementation.

Problem
- A 'Cartesian Product' complexity explosion.
- The bigger a class becomes, the hard it is to figure out how it works,
  and the longer it takes to make a change. The changes made to one of the
  variants of functionality may require making changes across the whole class,
  which often results in making errors or not addressing some critical side effects.

Solution
- The Bridge pattern attempts to solve this problem by switching from
  inheritance to composition.
- It simplifies code maintenance and minimizes the risk of breaking existing code.
- You abstract one of the dimensions into a separate hierarchy, so that the
  original classes will reference an object of the new hierarchy, instead of
  having all of its state and behaviors within one class.

Abstraction and Implementation
1. Abstraction (interface) is a high-level control layer for some entity, this layer
   isn't supposed to do any real work on its own. It should delegate the work
   to the implementation layer.
2. Implementation (platform) declares the interface that's common for all concrete
   implementations. An abstraction can only communicate with an implementation
   object via methods that are declared here.

Applicability
- Use the Bridge pattern when you want to divide and organize a monolithic class that has
  several variants of some functionality (for example if the class work with various
  database servers).
- Use the Bridge pattern when you need to extend a class in several independent dimensions.
- Use the Bridge if you need to be able to switch implementations at runtime.

Implementation
1. Identify the independent dimensions in your classes (frontend/backend, interface/implementation).
2. See what operations the clients needs and define them in the base abstraction class.
3. Determine the operation available on all platforms. Declare the ones that the abstraction needs in the
   general implementation interface.
4. For all platforms in your domain create concrete implementation classes and make sure they
   all follow the implementation interface.
5. Inside the abstraction class, add a reference field for the implementation type.
   The abstraction delegates most of the work to the implementation object that's referenced in that field.
6. The client code should pass an implementation object to the abstraction's constructor
   to associate one with the other. After that client can forget about the implementation
   and work only with the abstraction object.

Pros:
- The client works with high-level abstractions without exposed to the platform details.
- Open/Closed Principle. Introduce new abstractions and implementation independently from each other.
- Single Responsibility Principle. Focus on high-level logic in the abstraction,
  and on platform details in the implementation.

Cons:
- The overall complexity of the code increases.

Relationship with Other Patterns
- Bridge is usually designed up-front. Letting you develop parts of an
  application independently of each other.
- You can use Abstract Factory along with Bridge.
  This pairing is useful when some abstractions defined by Bridge
  can only work with specific implementation.
- You can combine Builder with Bridge, the director class plays the role of
  abstraction, while different builders act as implementations.
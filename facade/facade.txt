What is Facade?
- Facade is a structural design pattern that provides a
  simplified interface to a library, a framework, or any other
  complex set of classes.
- Facade it lets the client work with dozens of components using a simple interface.
- It provides convenient access to a particular part of the subsystem's functionality.

Problem
- Imagine that you must make your code work with a broad set of objects
  that belong to a sophisticated library or framework. Ordinarily, you'd
  need to initialize all of those objects, keep track of dependencies,
  execute methods in the correct order and so on.
- As a result, the business logic of your classes would become tightly coupled
  to the implementation details of 3rd-party classes, making it hard to comprehend
  and maintain.

Solution
- A facade is a class that provides a simple interface to a complex subsystem
  which contains lots of moving parts. It includes only those features that
  clients really care about.
- Having a facade is handy when you need to integrate your app with a
  sophisticated library that has dozens of features, but you just need a tiny
  bit of its functionality.
- The client uses the facade instead of calling the subsystem object directly.
- Facade doesn't introduce any new functionality, the subsystem itself is unaware of
  the Facade.

Applicability
- Use the Facade pattern when you need to have a limited but straightforward
  interface to a complex subsystem.
- Use the Facade when you want to structure a subsystem into layers.

Implementation
1. Check whether it's possible to provide a simpler interface than
   what an existing subsystem already provides. You're on the right track if
   this interface make client code independent from many of the subsystem's classes.
2. The facade should redirect the calls from the client code to appropriate objects
   of the subsystem, the facade should be responsible for initializing the subsystem,
   and mange its further life cycle.
3. Make all the client code communicate with the subsystem only via the facade.
   Now the client code is protected from any changes in the subsystem code.
4. If the facade becomes too big, consider extracting part of its behavior to a
   new, refined facade class.

Pros:
- You can isolate your code from the complexity of a subsystem.

Cons:
- A facade can become a god object coupled to all classes of an app.

Relationship with Other Patterns
- Facade defines a new interface for existing objects.
  Adapter tries to make existing interface usable.
- Abstract Factory can server as an alternative to Facade when you only
  to hide the way the subsystem objects are created from the client code.
- Flyweight shows how to make lots of little objects,
  Facade shows how to make a single object that represents an entire subsystem.
- A Facade class can often be transformed into a Singleton since a single facade object
  is sufficient in most cases.